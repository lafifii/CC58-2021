# -*- coding: utf-8 -*-
"""Topicos-TA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14EFN2-BvCy3Jutb_N4fqac9xkHYnYr3I

**Algoritmo de Producto cartesiano
para tuplas**
"""

def cartesianProduct(tuple_a, tuple_b):
  result = tuple()
  for num in tuple_a:
    for nam in tuple_b:
      result += ((num, nam), )
  return result

"""**Algoritmo de Producto cartesiano
para listas**
"""

def cartesianProductB(list_a, list_b):
  result = []
  for num in list_a:
    for nam in list_b:
      result.append([num, nam])
  return result

"""**Algoritmo Johnson
Trotter para listas**
"""

def fact(n):
  ans = n
  for i in range(2, n):
    ans*= i 
  return ans

def searchmob(a, dir, n):
  m = 0
  id = -1

  for i in range(n):
    if (dir[a[i] - 1] == 0):
      if (i != 0 and a[i] > a[i - 1] and a[i] > m):
        m = a[i]
        id = i
        
    else:
      if (i != n - 1 and a[i] > a[i + 1] and a[i] > m):
        m = a[i]
        id = i
      
  return (m, id + 1)

def johnsontrotter(a):
  perms = [a.copy()]

  n = len(a)
  dir = [0]*n
  lim = fact(n) - 1

  for i in range(lim):
    m, id = searchmob(a, dir, n);
  
    if (dir[a[id- 1] - 1] ==  0):
      a[id-1], a[id-2] = (a[id-2], a[id-1])
  
    else:
      a[id], a[id-1] = (a[id-1], a[id])
  
    for i in range(n):
      if(a[i] > m):
        dir[a[i] - 1] = not dir[a[i] - 1]
  
    perms.append(a.copy())

  return perms

a = johnsontrotter([1,2,3])
for x in a:
  print(x)

